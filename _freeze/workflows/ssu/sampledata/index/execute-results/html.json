{
  "hash": "85f9925da7e1bae8cad799c43b3b2a68",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"1. Sample Metadata\"\ndescription: |\n  Workflow for wrangling sample metadata and generating informative sample names.\nlisting: \n    id: sd-listing\n    contents: data-sd.yml\n    type: table\n    sort-ui: false\n    filter-ui: false\n    fields: \n      - filename\n      - description\n    field-links: \n      - filename\n    field-display-names: \n      filename: File Name\n      description: Description\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n## Workflow Input\n\n::: {.callout-note icon=false}\n## Data & Scripts\n\nThe table below contains links to files and scripts needed to run this workflow--specifically the `sampledata_processing.zip` archive which contains the necessary assets. Also included are the sample data tables generated at the end of the pipeline.\n:::\n\n::: {#sd-listing .column-body}\n:::\n\n\n## Overview\n\nThis workflow is designed to process our raw metadata files and generate more informative sample names. Our aim is to standardize metadata entries, generate new sample names, and save sample data frames that are used in downstream analyses. \n\n## Curate Metadata\n\nThe first step in to load all metadata files (one for each sequencing run) and combine the files. \n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_paths <- list.files(path = paste0(here(work_here, \"/metadata_files\")), \n                         pattern = \"\\\\.csv$\", full.names = TRUE)\ntmp_meta <- vroom::vroom(file_paths)\ncolnames(tmp_meta)[1] <- \"Original_name\"\n```\n:::\n\n\nNext we remove any duplicate entries. We have duplicates because some samples were sequenced more than once due to low read count from the initial run. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndups_in_md <- tmp_meta[duplicated(tmp_meta[,1:1]),]\ntmp_meta <- tmp_meta[!duplicated(tmp_meta[,1:1]),]\n```\n:::\n\n\nNext we remove several samples due to low initial read count. We pulled these out before doing any renaming, processing, etc. so they are only listed in the metadata files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#### Regex Code for partial matches\ntmp_lc_samp <- c(\"7512\", \"8978-S\", \"8978-H\", \"7640-S\")\ntmp_meta <- tmp_meta[!grepl(paste(tmp_lc_samp, collapse = \"|\"), \n                            tmp_meta$Original_name), ]\n```\n:::\n\n\nAnd finally do a little maintenance on column names. What we are after here is standardized column names without spaces, periods, dashes, etc.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(tmp_meta) <- gsub(\"-| |\\\\.+\", \"_\", colnames(tmp_meta))\ncolnames(tmp_meta)[12] <- \"Species_pair\"\ncolnames(tmp_meta) <- gsub(\"_Original\", \"\", colnames(tmp_meta))\n```\n:::\n\n\nOnce this is finished we can go ahead and select columns in the metadata that are most important for downstream analysis. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_meta <- tmp_meta %>% \n  dplyr::relocate(c(\"Ocean\", \"Morphospecies\", \"Tissue\", \n                    \"Habitat\", \"Site\", \"Site_2\", \"Taxon\", \n                    \"Length\", \"Station_no\", \"Species_pair\", \n                    \"Species_group\", \"Species_complex\", \n                    \"Plate\", \"Row\", \"Column\"), \n                  .after = \"Original_name\")\ntmp_meta[17:ncol(tmp_meta)] <- NULL\n```\n:::\n\n\nAt this point we need to standardize some of the values in the metadata categories. This includes things like replacing spaces with underscores (`_`). The goal here is to eliminate anything that may cause issues later in the workflows. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_meta <- tmp_meta %>%\n  # Fix specific replacements\n  mutate(\n    Ocean = str_replace_all(Ocean, c(\n      \"Pacific\" = \"Eastern_Pacific\",\n      \"Western Atlantic\" = \"Western_Atlantic\"\n    )),\n    Taxon = str_replace_all(Taxon, \"Snapping shrimp\", \"Snapping_shrimp\")\n  ) %>%\n  \n  # Normalize text by replacing spaces/dots in multiple columns\n  mutate(\n    Morphospecies = str_replace_all(Morphospecies, \" +\", \"_\"),\n    Species_pair  = str_replace_all(Species_pair, c(\n      \"\\\\. +\" = \"_\",\n      \" / \"   = \"-\",\n      \" +\"    = \"_\"\n    )),\n    Species_group   = str_replace_all(Species_group, c(\"\\\\. \" = \"_\", \" \" = \"_\")),\n    Species_complex = str_replace_all(Species_complex, \"\\\\. \", \"_\"),\n    Habitat   = str_replace_all(Habitat, \" +\", \"_\"),\n    Site      = str_replace_all(Site, \" +\", \"_\"),\n    Site_2    = str_replace_all(Site_2, \" +\", \"_\"),\n    Plate     = str_replace_all(Plate, \" \", \"_\")\n  ) %>%\n  \n  # Map multiple Taxon values to \"Environmental\"\n  mutate(\n    Taxon = str_replace_all(Taxon, c(\n      \"Rubble\"   = \"Environmental\", \n      \"Sediment\" = \"Environmental\", \n      \"Mud\"      = \"Environmental\",\n      \"Water\"    = \"Environmental\"\n    ))\n  )\n\n# Replace NA in Morphospecies with \"Environmental\"\ntmp_meta <- tmp_meta %>%\n  mutate(Morphospecies = replace_na(Morphospecies, \"Environmental\"))\n```\n:::\n\n\n## Sample Shortcodes\n\nNext we want to create more meaningful sample names. For this we generate some *shortcodes* that capture key information about each sample, specifically:\n\n- the sampling ocean\n- the species name\n- the tissue type\n\nThese we will combine with the unique individual ID number to get the new name. \n\nFor example, something like `EP_A_HEBE_GL_8937` is the gill tissue (**GL**) from an *Alpheus hebes* (**A-HEBE**), individual ID **8937**, collected in the Eastern Pacific (**EP**). \n\nWe use a similar convention for environmental samples, but instead of species name, we use `E_SAMP` to delineate environmental samples. For example, `WA_E_SAMP_WT_3075` is a water sample (**WT**) collected from the Western Atlantic (**WA**), unique id **3075**.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Click to see the the shortcodes for each variable.\"}\ntmp_ocean <- c(\n  \"Control\" = \"CON\",\n  \"Eastern_Pacific\" = \"EP\",\n  \"Western_Atlantic\" = \"WA\"\n)\n\ntmp_tissue <- c(\n  \"Control\" = \"CON\", \n  \"Egg\" = \"EG\", \n  \"Gill\" = \"GL\", \n  \"Hepatopancreas\" = \"HP\", \n  \"Midgut\" = \"MG\", \n  \"Stomach\" = \"ST\", \n  \"Mud\" = \"MD\", \n  \"Rubble\" = \"RB\", \n  \"Sediment\" = \"SD\", \n  \"Water\" = \"WT\"\n)\n\ntmp_species <- c(\n  \"Control\" = \"CON\", \n  \"Alpheus_arenensis\" = \"A_AREN\", \n  \"Alpheus_bahamensis\" = \"A_BAHA\", \n  \"Alpheus_bouvieri\" = \"A_BOUV\", \n  \"Alpheus_cristulifrons\" = \"A_CRIS\", \n  \"Alpheus_fasciatus\" = \"A_FASC\", \n  \"Alpheus_floridanus\" = \"A_FLOR\", \n  \"Alpheus_formosus\" = \"A_FORM\", \n  \"Alpheus_galapagensis\" = \"A_GALA\", \n  \"Alpheus_hebes\" = \"A_HEBE\", \n  \"Alpheus_hephaestus\" = \"A_HEPH\", \n  \"Alpheus_hyeyoungae\" = \"A_HYEY\", \n  \"Alpheus_javieri\" = \"A_JAVI\", \n  \"Alpheus_millsae\" = \"A_MILL\", \n  \"Alpheus_nuttingi\" = \"A_NUTT\", \n  \"Alpheus_panamensis\" = \"A_PANA\", \n  \"Alpheus_paracrinitus_no_spot\" = \"A_PCNS\", \n  \"Alpheus_paracrinitus_with_spot\" = \"A_PCWS\", \n  \"Alpheus_paraformosus\" = \"A_PARA\", \n  \"Alpheus_platycheirus\" = \"A_PLAT\", \n  \"Alpheus_rostratus\" = \"A_ROST\", \n  \"Alpheus_saxidomus\" = \"A_SAXI\", \n  \"Alpheus_simus\" = \"A_SIMU\", \n  \"Alpheus_thomasi\" = \"A_THOM\", \n  \"Alpheus_umbo\" = \"A_UMBO\", \n  \"Alpheus_utriensis\" = \"A_UTRI\", \n  \"Alpheus_verrilli\" = \"A_VERR\", \n  \"Alpheus_websteri\" = \"A_WEBS\", \n  \"Environmental\" = \"E_SAMP\", \n  \"Unknown\" = \"UNKN\"\n)\n```\n:::\n\n\nWith these shortcodes in hand we can match each original sample names (from the fastq file names) to the shortcodes. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_shortcode <- tmp_meta\ntmp_shortcode <- tmp_shortcode %>% select(1:4, 8)\n\ntmp_shortcode <- tmp_shortcode %>%\n  mutate(\n    Ocean_code   = Ocean,\n    Species_code = Morphospecies,\n    Tissue_code  = Tissue\n  )\n\ntmp_shortcode <- tmp_shortcode %>%\n  mutate(\n    Ocean_code   = str_replace_all(Ocean, tmp_ocean),\n    Species_code = str_replace_all(Morphospecies, tmp_species),\n    Tissue_code  = str_replace_all(Tissue, tmp_tissue)\n  )\ntmp_shortcode$Ocean_code <- tmp_shortcode$Ocean\ntmp_shortcode <- tmp_shortcode %>%\n  mutate(Ocean_code = str_replace_all(Ocean_code, tmp_ocean)) \n\ntmp_shortcode$Species_code <- tmp_shortcode$Morphospecies\ntmp_shortcode <- tmp_shortcode %>%\n  mutate(Species_code = str_replace_all(Species_code, tmp_species)) \n\ntmp_shortcode$Tissue_code <- tmp_shortcode$Tissue\ntmp_shortcode <- tmp_shortcode %>%\n  mutate(Tissue_code = str_replace_all(Tissue_code, tmp_tissue)) \n\ntmp_shortcode[2:4] <- NULL\n\ntmp_shortcode <- tmp_shortcode %>% \n  dplyr::relocate(\"Taxon\", .after = \"Tissue_code\")\n```\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\n---------------------------------------------------------------------------\n Original_name   Ocean_code   Species_code   Tissue_code        Taxon      \n--------------- ------------ -------------- ------------- -----------------\n    7322-M           EP          A_PANA          MG        Snapping_shrimp \n\n    7322-H           EP          A_PANA          HP        Snapping_shrimp \n\n    7322-S           EP          A_PANA          ST        Snapping_shrimp \n\n    7322-G           EP          A_PANA          GL        Snapping_shrimp \n\n    7326-M           EP          A_PANA          MG        Snapping_shrimp \n\n    7326-G           EP          A_PANA          GL        Snapping_shrimp \n---------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\nStill with me? Even though we have the pieces in place to standardize the sample names, we cannot do that yet because  different sample types have different initial naming conventions. For examples, Control samples are named like `Control-1`, `Control-2`, etc., while the snapping shrimp are named like `7322-M`, `7322-H`, etc. Environmental samples have totally different names, for example `Machete_scrap2`, `ML2670`, etc. This makes it a litle difficult to parse out meaningful information (specifically ID numbers) from the original sample names and apply our short codes to generate the new names. \n\nWhen we generated the short codes above we also included a column called `Taxon`. These data tell us whether a the entry is a snapping shrimp, a control, or an environmental sample. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(tmp_shortcode$Taxon)\n```\n:::\n\n\n```\n[1] \"Snapping_shrimp\" \"Control\"  \"Environmental\"  \n```\n\nWe can use the base R command `split` to separate the dataset based on the `Taxon` type so that we can process each category separately. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_split_dfs <- split(tmp_shortcode, tmp_shortcode$Taxon)\n```\n:::\n\n\nGenerating three separate data frames. \n\n```\ntmp_split_dfs$Control\n\ntmp_split_dfs$Environmental\n\ntmp_split_dfs$Snapping_shrimp\n```\n\n### Control samples\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_control <- tmp_split_dfs$Control\ntmp_control$tmp <- tmp_control$Original_name\n\ntmp_control <- tmp_control %>%\n  separate_wider_delim(tmp, delim = \"-\", names = c(\"tmp1\", \"ID\"))\ntmp_control$tmp1 <- NULL\n```\n:::\n\n\n### Environmental samples\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_envr <- tmp_split_dfs$Environmental\ntmp_envr$tmp <- tmp_envr$Original_name\n\ntmp_envr <- tmp_envr %>%\n  separate_wider_delim(tmp,\n                       delim = stringr::regex(\"(_)|(ML)\"),\n                       too_few = \"align_start\",\n                       names_sep = \"\",\n                       names_repair = ~ sub(\"value\", \"X\", .x))\n\ntmp_envr$tmp2 <- str_replace(tmp_envr$tmp2, \"(\\\\d+).*\", \"\\\\1\")\ntmp_envr$tmp2 <- str_replace(tmp_envr$tmp2, \"Sed\", \"sed\")\ntmp_envr$tmp1 <- NULL\ntmp_envr <- tmp_envr %>% dplyr::rename(ID = tmp2)\n```\n:::\n\n\n### Shrimp samples\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_shrmp <- tmp_split_dfs$Snapping_shrimp\n\ntmp_shrmp$tmp <- tmp_shrmp$Original_name\ntmp_shrmp %>%\n  filter(Original_name == \"7332-H-M\")\ntmp_shrmp$tmp <- gsub(\"7332-H-M\", \"7332M-H\", tmp_shrmp$tmp)\n\ntmp_shrmp <- tmp_shrmp %>%\n  separate_wider_delim(tmp,\n                       delim = \"-\",\n                       names = c(\"tmp1\", \"tmp2\")\n                       )\ntmp_shrmp %>%\n  filter(Original_name == \"7332-H-M\")\ntmp_shrmp$tmp2 <- NULL\ntmp_shrmp <- tmp_shrmp %>% dplyr::rename(ID = tmp1)\n```\n:::\n\n\nSweet. At this point we can generate the new unique name for each sample based on the criteria listed above. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_control$SampleID <- tmp_control$Original_name\ntmp_control$SampleID <- gsub(\"-\", \"_\", tmp_control$SampleID)\n\ntmp_envr <- tmp_envr %>%\n  mutate(SampleID = paste(Ocean_code, \n                          Species_code, \n                          Tissue_code, \n                          ID, \n                          sep = \"_\"))\ntmp_shrmp <- tmp_shrmp %>%\n  mutate(SampleID = paste(Ocean_code, \n                          Species_code, \n                          Tissue_code, \n                          ID, \n                          sep = \"_\"))\n```\n:::\n\n\nAnd combine the three modified data frames. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_combo <- rbind(tmp_control, tmp_envr, tmp_shrmp)\ntmp_combo$Taxon <- NULL\nshortcodes <- tmp_combo\n```\n:::\n\n\nAnd generate a modified metadata file containing the new sample ID plus the original and modified fastq file names. We have a four column tab delimited text file called `fastq_info.txt` that contains the original sample names, the run ID, plus the original\tforward and reverse fastq file names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_combo[2:5] <- NULL\ntmp_fastq <- read_delim(here(work_here, \"fastq_info.txt\"))\n\nall_metadata <- dplyr::left_join(tmp_meta, tmp_combo, by = \"Original_name\") %>%\n  dplyr::left_join(., tmp_fastq, by = \"Original_name\")\n\nall_metadata <- all_metadata %>% dplyr::relocate(\"SampleID\", \n                                         .before = \"Original_name\")\nall_metadata <- all_metadata %>% \n  dplyr::relocate(\"Run\", .before = \"Plate\")\n\nall_metadata <- all_metadata %>%\n  mutate(Fastq_ID_forward_rename = paste0(SampleID, \"_R1.fastq.gz\")) %>%\n  relocate(Fastq_ID_forward_rename, .after = Fastq_ID_forward_original) %>%\n  mutate(Fastq_ID_reverse_rename = paste0(SampleID, \"_R2.fastq.gz\")) %>%\n  relocate(Fastq_ID_reverse_rename, .after = Fastq_ID_reverse_original)\n```\n:::\n\n\n## Modified Metadata\n\nAnd here is the modified metadata. \n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n\n### Expand to column descriptions for sample table\n\n| Header                      | Description                                            |\n|-----------------------------|----------------------------------------------|\n| `SampleID`                  | Sample ID based on Ocean, species, tissue, & unique ID |\n| `Original_name`             | Original sample ID                                     |\n| `Ocean`                     | Sampling ocean                                         |\n| `Morphospecies`             | Host shrimp species                                    |\n| `Tissue`                    | Shrimp tissue type                                     |\n| `Habitat`                   | Sampling habitat                                       |\n| `Site`                      | Sampling Site 1                                        |\n| `Site_2`                    | Sampling Site 2                                        |\n| `Taxon`                     | Shrimp, environmental samples, or Controls             |\n| `Length`                    | Length of individual                                   |\n| `Station_no`                | ASK MATT                                               |\n| `Species_pair`              | ASK MATT                                               |\n| `Species_group`             | ASK MATT                                               |\n| `Species_complex`           | ASK MATT                                               |\n| `Run`                       | Sequencing run ID                                      |\n| `Plate`                     | Sequencing plate ID                                    |\n| `Row`                       | Sequencing plate row number                            |\n| `Column`                    | Sequencing plate column number                         |\n| `Fastq_ID_forward_original` | Original fastq ID (F)                                  |\n| `Fastq_ID_forward_rename`   | New fastq ID (F)                                       |\n| `Fastq_ID_reverse_original` | Original fastq ID (R)                                  |\n| `Fastq_ID_reverse_rename`   | New fastq ID (R)                                       |\n\n:::\n\n\nWe sequenced a total of 1909 samples, including 1797 shrimp samples, 52 environmental samples, and 60 control samples. 884 total samples came from the Eastern Pacific and 965 from the Western Atlantic.\n\n## Rename FastQ Files\n\nUsing the modified metadata, specifically the new sample names, we can rename all fastq file prior to processing the data. To batch rename samples we created tab-delimited *lookup tables*, where the first column contains the original name of each fastq file while the second column corresponds to the new name. We did this for each sequencing run. Here is an example of the first few samples from the lookup table for run BCS_34, which we call `BCS_34.rename.txt`\n\n```         \n8937-G_R1_001.trimmed.fastq EP_A_HEBE_GL_8937_R1_001.trimmed.fastq\n8937-H_R1_001.trimmed.fastq EP_A_HEBE_HP_8937_R1_001.trimmed.fastq\n8937-M_R1_001.trimmed.fastq EP_A_HEBE_MG_8937_R1_001.trimmed.fastq\n8937-S_R1_001.trimmed.fastq EP_A_HEBE_ST_8937_R1_001.trimmed.fastq\n```\n\nWe use the new metadata file and the base R command `split` to generate initial lookup tables for each of the six sequencing runs. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_split_dfs <- all_metadata\ntmp_split_dfs <- tmp_split_dfs %>% \n  dplyr::select(Run, \n                Fastq_ID_forward_original, \n                Fastq_ID_forward_rename, \n                Fastq_ID_reverse_original, \n                Fastq_ID_reverse_rename)\nsplit_dfs <- split(tmp_split_dfs, tmp_split_dfs$Run)\n```\n:::\n\n\nAgain, a partial example from run BCS_34. \n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\n-------------------------------------------------------------------------\n  Run       Fastq_ID_forward_original         Fastq_ID_forward_rename    \n-------- -------------------------------- -------------------------------\n BCS_34   9123-G_R1_001.trimmed.fastq.gz   EP_A_ROST_GL_9123_R1.fastq.gz \n\n BCS_34   9123-H_R1_001.trimmed.fastq.gz   EP_A_ROST_HP_9123_R1.fastq.gz \n\n BCS_34   9123-M_R1_001.trimmed.fastq.gz   EP_A_ROST_MG_9123_R1.fastq.gz \n-------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\nFinally, a little wrangling and then save each lookup table. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in split_dfs) {\n  tmp_ds <- data.frame(i)\n  tmp_name <- as.character(i[1,1])\n  \n  tmp_runF <- tmp_ds %>% \n    dplyr::select(Run, \n                  Fastq_ID_forward_original, \n                  Fastq_ID_forward_rename)\n  tmp_runF$Run <- NULL\n  tmp_runF <- tmp_runF %>% dplyr::rename(\"X1\" = 1, \"X2\" = 2)\n  \n  tmp_runR <- tmp_ds %>% \n    dplyr::select(Run,\n                  Fastq_ID_reverse_original, \n                  Fastq_ID_reverse_rename)\n  tmp_runR$Run <- NULL\n  tmp_runR <- tmp_runR %>% dplyr::rename(\"X1\" = 1, \"X2\" = 2)\n  \n  tmp_run <- rbind(tmp_runF, tmp_runR)\n  assign(tmp_name, tmp_run)  \n  write.table(\n    tmp_run, \n    paste(here(share_here, \"fastq_rename_lookup\", tmp_name), \n          \".rename.txt\", sep = \"\"), \n    sep = \"\\t\", \n    quote = FALSE, \n    row.names = FALSE, \n    col.names = FALSE)\n  rm(list = ls(pattern = \"tmp_\"))\n}\n```\n:::\n\n\nOnce we have lookup tables, we can run the bash script called `rename.sh`. This code will take the lookup table and go through each `fastq` file in the run directory and assign the new name. It will also output a timestamped rename results file showing the name changes. The script is run like so: \n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash rename.sh /path/to/files/ rename_file.txt [--dry-run]\n```\n:::\n\n\nPass the script a path to the fatsq files and a lookup table. If you just want to see what changes will be made without actually making the changes you can include the flag `--dry-run`. Here is an example from this dataset:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nbash rename.sh 01_TRIMMED_DATA/BCS_34_Istmo_S1-2_trimmed/ BCS_34.rename.txt\n```\n:::\n\n\nAnd you should see something like this in the results file: \n\n```\n8937-G_R1_001.trimmed.fastq.gz -> EP_A_HEBE_GL_8937_R1.fastq.gz\n8937-H_R1_001.trimmed.fastq.gz -> EP_A_HEBE_HP_8937_R1.fastq.gz\n8937-M_R1_001.trimmed.fastq.gz -> EP_A_HEBE_MG_8937_R1.fastq.gz\n8937-S_R1_001.trimmed.fastq.gz -> EP_A_HEBE_ST_8937_R1.fastq.gz\n8938-G_R1_001.trimmed.fastq.gz -> EP_A_HEBE_GL_8938_R1.fastq.gz\n8938-H_R1_001.trimmed.fastq.gz -> EP_A_HEBE_HP_8938_R1.fastq.gz\n```\n\n## Save Sample Data\n\nThe last thing to do is define a sample data frame that contains only the most relevant metadata. This table will be used in all downstream analyses to define samples. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_shortcodes <- shortcodes[order(shortcodes$SampleID), ]\ntmp_metadata <- all_metadata[order(all_metadata$SampleID), ]\nidentical(tmp_shortcodes$SampleID, tmp_metadata$SampleID)\n\nsamptab <- dplyr::left_join(tmp_metadata, tmp_shortcodes, \n                            by = c(\"SampleID\", \"Original_name\"))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_df <- samptab %>%\n  dplyr::select(\n    SampleID = SampleID,\n    OCEAN    = Ocean_code,\n    SPECIES  = Species_code,\n    TISSUE   = Tissue_code,\n    ID       = ID,\n    SITE     = Site,\n    SITE2    = Site_2,\n    HABITAT  = Habitat,\n    TAXON    = Taxon,\n    PAIR     = Species_pair,\n    GROUP    = Species_group,\n    COMPLEX  = Species_complex,\n    RUN      = Run,\n    PLATE    = Plate\n  )\n```\n:::\n\n\n\n\nMoving on. \n\n<!------------------------------------------------------------------------>\n<!-------------------- Use this area to save things ---------------------->\n<!------------------------------------------------------------------------>\n\n<!--------------------------------------->\n<!-- These chunks are for curated data -->\n<!--------------------------------------->\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n<!-------------------------------------------->\n<!-- These chunks are for  processing data  -->\n<!-------------------------------------------->\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n#### Detailed Session Info {.appendix}\n\n{{< dstart summary=\"Expand to see Session Info\" >}}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.5.1 (2025-06-13)\n os       macOS Ventura 13.7.8\n system   x86_64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Los_Angeles\n date     2025-10-02\n pandoc   3.6.3 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/x86_64/ (via rmarkdown)\n quarto   1.8.25 @ /Applications/quarto/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package                  * version   date (UTC) lib source\n Biobase                  * 2.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocGenerics             * 0.54.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n Biostrings               * 2.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n downloadthis             * 0.5.0     2025-09-26 [1] Github (fmmattioni/downloadthis@18e3e5a)\n dplyr                    * 1.1.4     2023-11-17 [1] CRAN (R 4.5.0)\n fontawesome              * 0.5.3     2024-11-16 [1] CRAN (R 4.5.0)\n forcats                  * 1.0.0     2023-01-29 [1] CRAN (R 4.5.0)\n fs                       * 1.6.6     2025-04-12 [1] CRAN (R 4.5.0)\n generics                 * 0.1.4     2025-05-09 [1] CRAN (R 4.5.0)\n GenomeInfoDb             * 1.44.2    2025-08-18 [1] Bioconductor 3.21 (R 4.5.1)\n GenomicRanges            * 1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n ggplot2                  * 4.0.0     2025-09-11 [1] CRAN (R 4.5.1)\n here                     * 1.0.2     2025-09-15 [1] CRAN (R 4.5.1)\n htmltools                * 0.5.8.1   2024-04-04 [1] CRAN (R 4.5.0)\n IRanges                  * 2.42.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n lubridate                * 1.9.4     2024-12-08 [1] CRAN (R 4.5.0)\n magrittr                 * 2.0.4     2025-09-12 [1] CRAN (R 4.5.1)\n MatrixGenerics           * 1.20.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n matrixStats              * 1.5.0     2025-01-07 [1] CRAN (R 4.5.0)\n mia                      * 1.15.6    2024-11-22 [1] Bioconductor 3.21 (R 4.5.0)\n microbiome               * 1.30.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n microeco                 * 1.15.0    2025-05-18 [1] CRAN (R 4.5.0)\n microViz                 * 0.12.7    2025-08-01 [1] https://david-barnett.r-universe.dev (R 4.5.1)\n MultiAssayExperiment     * 1.34.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n pander                   * 0.6.6     2025-03-01 [1] CRAN (R 4.5.0)\n phyloseq                 * 1.52.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n purrr                    * 1.1.0     2025-07-10 [1] CRAN (R 4.5.1)\n R.methodsS3              * 1.8.2     2022-06-13 [1] CRAN (R 4.5.0)\n R.oo                     * 1.27.1    2025-05-02 [1] CRAN (R 4.5.0)\n R.utils                  * 2.13.0    2025-02-24 [1] CRAN (R 4.5.0)\n reactable                * 0.4.4     2023-03-12 [1] CRAN (R 4.5.0)\n reactablefmtr            * 2.0.0     2022-03-16 [1] CRAN (R 4.5.0)\n readr                    * 2.1.5     2024-01-10 [1] CRAN (R 4.5.0)\n S4Vectors                * 0.46.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n seqinr                   * 4.2-36    2023-12-08 [1] CRAN (R 4.5.0)\n sessioninfo              * 1.2.3     2025-02-05 [1] CRAN (R 4.5.0)\n SingleCellExperiment     * 1.30.1    2025-05-05 [1] Bioconductor 3.21 (R 4.5.0)\n stringr                  * 1.5.2     2025-09-08 [1] CRAN (R 4.5.1)\n SummarizedExperiment     * 1.38.1    2025-04-28 [1] Bioconductor 3.21 (R 4.5.0)\n tibble                   * 3.3.0     2025-06-08 [1] CRAN (R 4.5.0)\n tidyr                    * 1.3.1     2024-01-24 [1] CRAN (R 4.5.0)\n tidyverse                * 2.0.0     2023-02-22 [1] CRAN (R 4.5.0)\n tinytable                * 0.13.0.10 2025-09-07 [1] https://vincentarelbundock.r-universe.dev (R 4.5.1)\n TreeSummarizedExperiment * 2.16.1    2025-05-08 [1] Bioconductor 3.21 (R 4.5.0)\n XVector                  * 0.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n zip                      * 2.3.3     2025-05-13 [1] CRAN (R 4.5.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.5-x86_64/Resources/library\n * ── Packages attached to the search path.\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n======   Devtools Session info   ===================================\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n package                  * version   date (UTC) lib source\n Biobase                  * 2.68.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n BiocGenerics             * 0.54.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n Biostrings               * 2.76.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n downloadthis             * 0.5.0     2025-09-26 [1] Github (fmmattioni/downloadthis@18e3e5a)\n dplyr                    * 1.1.4     2023-11-17 [1] CRAN (R 4.5.0)\n fontawesome              * 0.5.3     2024-11-16 [1] CRAN (R 4.5.0)\n forcats                  * 1.0.0     2023-01-29 [1] CRAN (R 4.5.0)\n fs                       * 1.6.6     2025-04-12 [1] CRAN (R 4.5.0)\n generics                 * 0.1.4     2025-05-09 [1] CRAN (R 4.5.0)\n GenomeInfoDb             * 1.44.2    2025-08-18 [1] Bioconductor 3.21 (R 4.5.1)\n GenomicRanges            * 1.60.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n ggplot2                  * 4.0.0     2025-09-11 [1] CRAN (R 4.5.1)\n here                     * 1.0.2     2025-09-15 [1] CRAN (R 4.5.1)\n htmltools                * 0.5.8.1   2024-04-04 [1] CRAN (R 4.5.0)\n IRanges                  * 2.42.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n lubridate                * 1.9.4     2024-12-08 [1] CRAN (R 4.5.0)\n magrittr                 * 2.0.4     2025-09-12 [1] CRAN (R 4.5.1)\n MatrixGenerics           * 1.20.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n matrixStats              * 1.5.0     2025-01-07 [1] CRAN (R 4.5.0)\n mia                      * 1.15.6    2024-11-22 [1] Bioconductor 3.21 (R 4.5.0)\n microbiome               * 1.30.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n microeco                 * 1.15.0    2025-05-18 [1] CRAN (R 4.5.0)\n microViz                 * 0.12.7    2025-08-01 [1] https://david-barnett.r-universe.dev (R 4.5.1)\n MultiAssayExperiment     * 1.34.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n pander                   * 0.6.6     2025-03-01 [1] CRAN (R 4.5.0)\n phyloseq                 * 1.52.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n purrr                    * 1.1.0     2025-07-10 [1] CRAN (R 4.5.1)\n R.methodsS3              * 1.8.2     2022-06-13 [1] CRAN (R 4.5.0)\n R.oo                     * 1.27.1    2025-05-02 [1] CRAN (R 4.5.0)\n R.utils                  * 2.13.0    2025-02-24 [1] CRAN (R 4.5.0)\n reactable                * 0.4.4     2023-03-12 [1] CRAN (R 4.5.0)\n reactablefmtr            * 2.0.0     2022-03-16 [1] CRAN (R 4.5.0)\n readr                    * 2.1.5     2024-01-10 [1] CRAN (R 4.5.0)\n S4Vectors                * 0.46.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n seqinr                   * 4.2-36    2023-12-08 [1] CRAN (R 4.5.0)\n sessioninfo              * 1.2.3     2025-02-05 [1] CRAN (R 4.5.0)\n SingleCellExperiment     * 1.30.1    2025-05-05 [1] Bioconductor 3.21 (R 4.5.0)\n stringr                  * 1.5.2     2025-09-08 [1] CRAN (R 4.5.1)\n SummarizedExperiment     * 1.38.1    2025-04-28 [1] Bioconductor 3.21 (R 4.5.0)\n tibble                   * 3.3.0     2025-06-08 [1] CRAN (R 4.5.0)\n tidyr                    * 1.3.1     2024-01-24 [1] CRAN (R 4.5.0)\n tidyverse                * 2.0.0     2023-02-22 [1] CRAN (R 4.5.0)\n tinytable                * 0.13.0.10 2025-09-07 [1] https://vincentarelbundock.r-universe.dev (R 4.5.1)\n TreeSummarizedExperiment * 2.16.1    2025-05-08 [1] Bioconductor 3.21 (R 4.5.0)\n XVector                  * 0.48.0    2025-04-15 [1] Bioconductor 3.21 (R 4.5.0)\n zip                      * 2.3.3     2025-05-13 [1] CRAN (R 4.5.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.5-x86_64/Resources/library\n * ── Packages attached to the search path.\n```\n\n\n:::\n:::\n\n\n{{< dstop >}}\n\n#### Last updated on {.appendix}\n\n2025-10-02\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}